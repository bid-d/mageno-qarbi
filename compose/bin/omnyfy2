#!/bin/bash

# Color set
RED='\033[0;31m'
GREEN='\033[0;32m'
BGREEN='\033[1;32m'
BYELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'
CHECKMARK='\xE2\x9C\x94'
CROSS='\xE2\x9D\x8C'

PROJECT=marketplace

PROJECT_SOURCE=src

SOURCE_FILE=marketplace-latest.zip

DOMAIN=$1

STOP_PORTS=(15672 9200 9300 3306 8025 5672 80 443)

echo -e "${BYELLOW}PAY ATTENTION, THIS SCRIPT WILL REQUIRE PASSWORD INPUT!\n${NC}"
sleep 2

# Checking if Docker and Docker Compose are installed
echo -e "${BGREEN}Checking if Docker and Docker Compose are installed ...${NC}"
sleep 1
echo -e -n "Checking ${CYAN}Docker Version${NC} "
if [[ ! -x "$(command -v docker)" ]]; then
    echo -e "${RED}${CROSS} Not Installed${NC}"
    echo -e "${RED}Exited Setup${NC}"
    exit
fi
DOCKER=$(docker --version)
echo -e " ${GREEN}${CHECKMARK} $DOCKER${NC}"
sleep 1

echo -e -n "Checking ${CYAN}Docker Permission ${NC}"
sleep 1
docker ps > /dev/null 2>&1

if [[ $? != 0 ]]; then
    echo -e "${RED}${CROSS} Permission not set, please follow https://docs.docker.com/engine/install/linux-postinstall/ for setting properly!"
    echo -e "${RED}Exited Setup${NC}"
    exit
fi

echo -e " ${GREEN}${CHECKMARK} Permission is set properly!${NC}"
sleep 1

echo -e -n "Checking ${CYAN}Docker Compose Version${NC} "

if [[ ! -x "$(command -v docker-compose)" ]]; then
    echo -e "${RED}${CROSS} Not Installed${NC}"
    echo -e "${RED}Exited Setup${NC}"
    exit
fi

DOCKER_COMPOSE=$(docker-compose --version)
echo -e " ${GREEN}${CHECKMARK} $DOCKER_COMPOSE${NC}"

sleep 1
echo -e "${BGREEN}Docker and Docker Compose are Installed!\n${NC}"
sleep 2

# Remove other running docker service
echo -e "${BGREEN}Removing other running docker services ...${NC}"
docker stop $(docker ps) > /dev/null 2>&1

echo -e "${BGREEN}${CHECKMARK} Removal is done!\n"

# Check if the above ports are running
echo -e "${BGREEN}Checking if needed ports are available ...${NC}"
for port in ${STOP_PORTS[@]}; do
    echo -e -n "Checking port ${CYAN}$port${NC} "
    SERVICE=$(sudo lsof -i -P | grep LISTEN | grep :$port)
    if [[ ! -z "$SERVICE" ]]; then
        echo -e "${RED}${CROSS} Unavailable, You need to turn off service running on this port!${NC}"
        echo -e "${RED}Exited Setup${NC}"
        exit
    fi
    echo -e " ${GREEN}${CHECKMARK} Available${NC}"
done

echo -e "${GREEN}All ports are available!\n${NC}"

echo -e "${BGREEN}Setting up your Marketplace\n${NC}"
sleep 2

if [[ -d "$PROJECT" ]]; then
  rm -rf $PROJECT/*
fi

if [[ ! -f "$SOURCE_FILE" ]]; then
    echo -e "${RED}Source file doesn't exist, exited setup${NC}"
    exit
fi

unzip "$SOURCE_FILE" -d "$PROJECT/"
sleep 2

echo -e "${BGREEN}Importing Source Code ...${NC}"

if [[ ! -d "$PROJECT_SOURCE" ]]; then
    mkdir $PROJECT_SOURCE
    cp -R "$PROJECT"/* ./"$PROJECT_SOURCE"
else
    for d in $PROJECT/app/code/*/*/ ; do
        # echo $d
        if [[ -d "$d" ]]; then
            #module_folder = `basename $(dirname $d)`/`basename $d`
            if [[ -d ./src/app/code/`basename $(dirname $d)`/`basename $d`/.git ]]; then
                echo -e "${GREEN}Detected module having Git${NC}: `basename $(dirname $d)`/`basename $d`"
                (cd ./src/app/code/`basename $(dirname $d)`/`basename $d` && git reset --hard)
                (cd ./src/app/code/`basename $(dirname $d)`/`basename $d` && git branch)
                (cd ./src/app/code/`basename $(dirname $d)`/`basename $d` && git pull)
            else
                rm -rf ./src/app/code/`basename $(dirname $d)`/`basename $d`
                cp -rf $d ./src/app/code/`basename $(dirname $d)`/`basename $d`
            fi
        fi
    done
fi

# Get Magento Version
version=$(cat src/composer.json | grep "magento/product-community-edition")
version=${version:46:3}

# Setup Database
if [[ $version = "2.2" ]]; then
    sed -i 's/biddd\/omnyfy-phpfpm:7.4-fpm-2/biddd\/omnyfy-phpfpm:7.1-fpm-2/g' docker-compose.yml
    sed -i 's/biddd\/php-fpm:7.4-fpm-7/biddd\/php-fpm:7.1-fpm-13/g' docker-compose.yml
fi

cp env.example.php src/app/etc/env.php

docker-compose -f docker-compose.yml up -d

echo -e "\n${BGREEN}Waiting for all containers to start up ...\n${NC}"
sleep 15

# Init files to container
bin/copytocontainer --all

echo -e "${BGREEN}Setting up Database ...\n${NC}"
DB=$(ls $PROJECT/dbdump)
cp $PROJECT/dbdump/$DB .

# Update utf encoding
sed -i 's/utf8mb4_0900_ai_ci/utf8mb4_unicode_ci/g' $DB

echo -e "${BGREEN}Importing DB ...\n${NC}"
bin/mysql < $DB

echo -e "${BGREEN}Composer Install ...\n${NC}"
sleep 2
bin/composer install

bin/copyfromcontainer --all

echo -e "\n${BGREEN}Setting up Domain ...${NC}"
if [[ -z "$DOMAIN" ]]; then
    DOMAIN=magento2.local
fi

ETC_HOST=$(sudo cat /etc/hosts | grep "$DOMAIN")
if [[ -z "$ETC_HOST" ]]; then
    echo "127.0.0.1 ::1 $DOMAIN" | sudo tee -a /etc/hosts
fi

bin/magento app:config:import
bin/magento config:set web/secure/base_url https://$DOMAIN/
bin/magento config:set web/unsecure/base_url https://$DOMAIN/
bin/magento config:set admin/url/custom https://$DOMAIN/

if [[ $version = "2.4" ]]; then
    echo -e "\n${BGREEN}Setting up Elasticsearch ...${NC}"
    bin/magento config:set catalog/search/engine 'elasticsearch7'
    bin/magento config:set catalog/search/elasticsearch7_server_hostname 'elasticsearch'
    bin/magento config:set catalog/search/elasticsearch7_server_port '9200'
fi

# Clear files
rm "$DB"
    rm -rf "$PROJECT"

bin/restart

echo -e "\n${BGREEN}${CHECKMARK} Finish setting up Marketplace version $version, please visit your site: https://$DOMAIN/${NC}"
